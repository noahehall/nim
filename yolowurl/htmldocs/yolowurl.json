{"orig":"/home/poop/git/foss/nim/yolowurl/yolowurl.nim","nimble":"unknown","moduleDescription":"use methods because at runtime we need to know the type","entries":[{"name":"`...`","type":"skIterator","line":496,"col":0,"code":"iterator `...`[T](a: T; b: T): T","signature":{"return":"T","arguments":[{"name":"a","type":"T"},{"name":"b","type":"T"}],"genericParams":[{"name":"T"}]}},{"name":"MyFlag","type":"skType","line":755,"col":33,"code":"MyFlag {.size: 4.} = enum\n  A, B, C, D"},{"name":"pubfn","type":"skProc","line":783,"col":0,"code":"proc pubfn(): void {.raises: [], tags: [].}","signature":{"return":"void","pragmas":["raises: []","tags: []"]}},{"name":"BigMoney","type":"skType","line":975,"col":12,"code":"BigMoney = int"},{"name":"PublicPoop","type":"skType","line":1004,"col":14,"code":"PublicPoop = object\n  u: bool\n  times: int\n"},{"name":"Someone","type":"skType","line":1015,"col":11,"code":"Someone = object\n  name*, bday: string\n  age*: int\n"},{"name":"SomeObj","type":"skType","line":1032,"col":14,"code":"SomeObj = object\n  pub*: string\n  prv: string\n"},{"name":"prv=","type":"skProc","line":1037,"col":0,"code":"proc prv=(x: var SomeObj; v: string) {.inline, raises: [], tags: [].}","signature":{"arguments":[{"name":"x","type":"var SomeObj"},{"name":"v","type":"string"}],"pragmas":["inline","raises: []","tags: []"]}},{"name":"prv","type":"skProc","line":1039,"col":0,"code":"proc prv(x: SomeObj): string {.inline, raises: [], tags: [].}","signature":{"return":"string","arguments":[{"name":"x","type":"SomeObj"}],"pragmas":["inline","raises: []","tags: []"]}},{"name":"Vector","type":"skType","line":1049,"col":10,"code":"Vector = object\n  x, y, z: float\n"},{"name":"`[]=`","type":"skProc","line":1053,"col":0,"code":"proc `[]=`(v: var Vector; i: int; value: float) {.raises: [], tags: [].}","signature":{"arguments":[{"name":"v","type":"var Vector"},{"name":"i","type":"int"},{"name":"value","type":"float"}],"pragmas":["raises: []","tags: []"]}},{"name":"`[]`","type":"skProc","line":1060,"col":0,"code":"proc `[]`(v: Vector; i: int): float {.raises: [], tags: [].}","signature":{"return":"float","arguments":[{"name":"v","type":"Vector"},{"name":"i","type":"int"}],"pragmas":["raises: []","tags: []"]}},{"name":"SomeoneRef","type":"skType","line":1087,"col":14,"code":"SomeoneRef = ref Someone"},{"name":"BinaryTree","type":"skType","line":1309,"col":17,"code":"BinaryTree[T] = ref object\n  le, ri: BinaryTree[T]\n  data: T\n"},{"name":"newNode","type":"skProc","line":1313,"col":0,"code":"proc newNode[T](data: T): BinaryTree[T]","signature":{"return":"BinaryTree[T]","arguments":[{"name":"data","type":"T"}],"genericParams":[{"name":"T"}]}},{"name":"preorder","type":"skIterator","line":1319,"col":0,"code":"iterator preorder[T](root: BinaryTree[T]): T","signature":{"return":"T","arguments":[{"name":"root","type":"BinaryTree[T]"}],"genericParams":[{"name":"T"}]}}]}